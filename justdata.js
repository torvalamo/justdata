// Generated by CoffeeScript 1.3.3
(function() {
  var parseBlock, parseElement;

  exports.parse = function(file, levels) {
    if (levels == null) {
      levels = -1;
    }
    file = file.trim().replace(/[\r\n]+/, '\n');
    return parseBlock(file, levels);
  };

  parseBlock = function(block, levels) {
    var array, element, elements, name, object, value, _i, _len, _ref;
    elements = block.split(/[\n\s]*\n(?=\S)/);
    object = {};
    array = [];
    for (_i = 0, _len = elements.length; _i < _len; _i++) {
      element = elements[_i];
      _ref = parseElement(element, levels), name = _ref[0], value = _ref[1];
      if (!value) {
        array.push(name);
      } else {
        object[name] = value;
      }
    }
    if (array.length) {
      if (Object.keys(object).length) {
        object._ = array[1] ? array : array[0];
      } else {
        if (array[1]) {
          return array;
        } else {
          return array[0];
        }
      }
    }
    return object;
  };

  parseElement = function(element, levels) {
    var elements, header, indent, item, items, _i, _len;
    items = element.split(/[\n\s]*\n/);
    header = items.shift().trim();
    if (!items.length) {
      return [header, false];
    }
    indent = items[0].match(/^\s+(?=\S)/);
    indent = indent[0];
    elements = [];
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      item = items[_i];
      if (!item.indexOf(indent)) {
        elements.push(item.substr(indent.length));
      } else {
        throw new Error("Bad indentation at '" + item + "'");
      }
    }
    elements = elements.join('\n');
    if (!levels) {
      return [header, elements];
    } else {
      return [header, parseBlock(elements, --levels)];
    }
  };

}).call(this);
